package es.uma.rysd.app;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.CoderMalfunctionError;

import javax.net.ssl.HttpsURLConnection;

import com.google.gson.Gson;

import es.uma.rysd.entities.*;

public class SWClient {
	// TODO: Complete the application name
	private final String app_name = "Consultav0.1";
	private final int year = 2024;

	private final String url_api = "https://swapi.dev/api/";

	// Auxiliary methods provided

	// Gets the URL of the resource id of the type resource
	public String buildResourceUrl(String resource, Integer id){
		return url_api + resource + "/" + id + "/";
	}

	// Given a resource URL, gets its ID
	public Integer extractIdFromUrl(String url){
		String[] parts = url.split("/");

		return Integer.parseInt(parts[parts.length-1]);
	}

//------------------------------------------------------------------------------------------------------------
//												COUNTRESOURCES
//------------------------------------------------------------------------------------------------------------
	// Queries a resource and returns how many elements it has
	public int countResources(String resource){
		// TODO: Handle possible exceptions appropriately

		// TODO: Create the corresponding URL: https://swapi.dev/api/{resource}/ replacing resource with the parameter
		URL url = null;
		try {
			url = new URL(url_api +resource+"/");
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			System.out.println("La URL es incorrecta");
			e.printStackTrace();
			return 0;
		}
		
		// TODO: Create the connection from the URL
		HttpsURLConnection conexion=null;
		try {
			conexion= (HttpsURLConnection)url.openConnection();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer conexión");
			e.printStackTrace();
			return 0;
		}

		// TODO: Add the headers User-Agent and Accept (see the statement)
		conexion.setRequestProperty("User-Agent", app_name +"-"+ year);
		conexion.setRequestProperty("Accept", "application/json");
		
		// TODO: Indicate that it is a GET request
		try {
			conexion.setRequestMethod("GET");
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer el método");
			e.printStackTrace();
			return 0;
		}

		// TODO: Check that the response code received is correct
		int code =0;
		try {
			code= conexion.getResponseCode();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha recibido código");
			e.printStackTrace();
			return 0;
		}
		if(code<200 || code>299)
		{
			try {
				System.out.println("La respuesta fue inválida. Code "+code+" Mensaje: "+ conexion.getResponseMessage());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		// TODO: Deserialize the response to ResourceCountResponse
		
		Gson parser = new Gson();
		InputStream in=null;
		try {
			in = conexion.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido acceder al fichero");
			e.printStackTrace();
			return 0;
		} 
		
		// TODO: Get the InputStream from the connection
		
		ResourceCountResult c = parser.fromJson(new InputStreamReader(in), ResourceCountResult.class);
		
		conexion.disconnect();
		// TODO: Return the number of elements
		return c.count;
	}
//------------------------------------------------------------------------------------------------------------
//												PERSON
//------------------------------------------------------------------------------------------------------------
	public Person getPerson(String urlname) {
		Person p =null;
		// Just in case it comes as http, we change it to https
		urlname = urlname.replaceAll("http:", "https:");

		// TODO: Handle possible exceptions appropriately
		URL url = null;
		try {
			url = new URL(urlname);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			System.out.println("La URL es incorrecta");
			e.printStackTrace();
			return p;
		}

		// TODO: Create the connection from the received URL
		HttpsURLConnection conexion=null;
		try {
			conexion= (HttpsURLConnection)url.openConnection();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer conexión");
			e.printStackTrace();
			return p;
		}

		// TODO: Add the headers User-Agent and Accept (see the statement)
		conexion.setRequestProperty("User-Agent", app_name +"-"+ year);
		conexion.setRequestProperty("Accept", "application/json");
		
		// TODO: Indicate that it is a GET request
		try {
			conexion.setRequestMethod("GET");
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer el método");
			e.printStackTrace();
			return p;
		}
		// TODO: Check that the response code received is correct
		int code =0;
		try {
			code= conexion.getResponseCode();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha recibido código");
			e.printStackTrace();
			return p;
		}
		if(code<200 || code>299)
		{
			try {
				System.out.println("La respuesta fue inválida. Code "+code+" Mensaje: "+ conexion.getResponseMessage());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("No se pudo acceder al mensaje");
				e.printStackTrace();
				return p;
			}
		}

		// TODO: Deserialize the response to Person
		Gson parser = new Gson();
		InputStream in=null;
		try {
			in = conexion.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido acceder al fichero");
			e.printStackTrace();
			return p;
		} 
		// TODO: For questions 2 and 3 (do not need to complete this for question 1)
		// TODO: From the URL in the homeworld field, get the planet data and store it in the homeplanet attribute
		p = parser.fromJson(new InputStreamReader(in), Person.class);
		p.homeplanet= getWorld(p.homeworld);
		return p;
	}
	
//------------------------------------------------------------------------------------------------------------
//														WORLD
//------------------------------------------------------------------------------------------------------------
	public World getWorld(String urlname) {
		World p = null;
		// Just in case it comes as http, we change it to https
		urlname = urlname.replaceAll("http:", "https:");
		
		URL url = null;
		try {
			url = new URL(urlname);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			System.out.println("La URL es incorrecta");
			e.printStackTrace();
			return p;
		}
		// TODO: Handle possible exceptions appropriately
		// TODO: Create the connection from the received URL

		HttpsURLConnection conexion=null;
		try {
			conexion= (HttpsURLConnection)url.openConnection();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer conexión");
			e.printStackTrace();
			return p;
		}
		

		conexion.setRequestProperty("User-Agent", app_name +"-"+ year);
		conexion.setRequestProperty("Accept", "application/json");
		
		// TODO: Indicate that it is a GET request
		try {
			conexion.setRequestMethod("GET");
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer el método");
			e.printStackTrace();
			return p;
		}
		// TODO: Check that the response code received is correct
		int code =0;
		try {
			code= conexion.getResponseCode();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha recibido código");
			e.printStackTrace();
			return p;
		}
		if(code<200 || code>299)
		{
			try {
				System.out.println("La respuesta fue inválida. Code "+code+" Mensaje: "+ conexion.getResponseMessage());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("No se pudo acceder al mensaje");
				e.printStackTrace();
				return p;
			}
		}
		// TODO: Deserialize the response to Planet
		Gson parser = new Gson();
		InputStream in=null;
		try {
			in = conexion.getInputStream();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido acceder al fichero");
			e.printStackTrace();
			return p;
		} 
		// TODO: For questions 2 and 3 (do not need to complete this for question 1)
		// TODO: From the URL in the homeworld field, get the planet data and store it in the homeplanet attribute
		p = parser.fromJson(new InputStreamReader(in), World.class);
		return p;
	}

	public Person searchPersonByName(String name){
		Person p = null;
		// TODO: Handle possible exceptions appropriately
		// TODO: Create the connection from the URL (url_api + name processed - see the statement)

		
		URL url = null;
		/*
		try {
			name= URLEncoder.encode(name,"utf-8");
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido codificar el nombre");
			e1.printStackTrace();
		}*/
		try {
			url = new URL(url_api+"people/?search="+name);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			System.out.println("La URL es incorrecta");
			e.printStackTrace();
			return p;
		}
		HttpsURLConnection conexion=null;
		try {
			conexion= (HttpsURLConnection)url.openConnection();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer conexión");
			e.printStackTrace();
			return p;
		}
		// TODO: Add the headers User-Agent and Accept (see the statement)
		conexion.setRequestProperty("User-Agent", app_name +"-"+ year);
		conexion.setRequestProperty("Accept", "application/json");
		// TODO: Indicate that it is a GET request
		try {
			conexion.setRequestMethod("GET");
		} catch (ProtocolException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido establecer el método");
			e.printStackTrace();
			return p;
		}
		// TODO: Check that the response code received is correct
		
		int code =0;
		try {
			code= conexion.getResponseCode();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha recibido código");
			e.printStackTrace();
			return p;
		}
		
		if(code<200 || code>299)
		{
			try {
				System.out.println("La respuesta fue inválida. Code "+code+" Mensaje: "+ conexion.getResponseMessage());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("No se pudo acceder al mensaje");
				e.printStackTrace();
				return p;
			}
		}
		
		if(code<200 || code>299)
		{
			try {
				System.out.println("La respuesta fue inválida. Code "+code+" Mensaje: "+ conexion.getResponseMessage());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				System.out.println("No se pudo acceder al mensaje");
				e.printStackTrace();
				return p;
			}
		}
		// TODO: Deserialize the response to SearchResponse -> Use the first position of the array as the result
		Gson parser = new Gson();
		InputStream in=null;
		try {
			in = (conexion.getInputStream());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("No se ha podido acceder al fichero");
			e.printStackTrace();
			return p;
		} 
		// TODO: For questions 2 and 3 (do not need to complete this for question 1)
		// TODO: From the URL in the homeworld field, get the planet data and store it in the homeplanet attribute
		//p = parser.fromJson(new InputStreamReader(in), Person[].class);
		QueryResponse queryResponse= parser.fromJson(new InputStreamReader(in), QueryResponse.class);
		Person [] result= queryResponse.results;
		if(result==null) {
			return null;
		}
		p= result[0];
		p.homeplanet= getWorld(p.homeworld);

		return p;
	}

}
